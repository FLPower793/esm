var data = {
	"DatabaseMediator" : [
		{
				"name" : "DatabaseMediator",
				"code" : "public DatabaseMediator(string base_path)",
				"description" : "Конструктор",
				"output" : "Инициализированный экземпляр класса",
				"input" : "Путь к файлу.",
				"side" : "Отсутствуют."
		},
		{
				"name" : "getUsersOnlineWithoutTask",
				"code" : "public User[] getUsersOnlineWithoutTask()",
				"description" : "Получить пользователей без задачи",
				"output" : "Массив, состоящий из объектов класса User. Содержит пользователей без задачи.",
				"input" : "Отсутствуют.",
				"side" : "Отсутствуют."
			
		}
		,
		{
				"name" : "getUser",
				"code" : "public User getUser(int id)",
				"description" : "Получить пользователя по его идентификатору.",
				"output" : "Объект класса User. Содержит информацию о пользователе. * Если пользователь не найден, возвращается пользователь с отрицательным идентификатором..",
				"input" : "Идентификатор пользователя",
				"side" : "Отсутствуют."
			
		}
		,
		{
				"name" : "getUserByLogin",
				"code" : "public User getUserByLogin(string login)",
				"description" : "Получить пользователя по его логину. ",
				"output" : " Объект класса User. Содержит информацию о пользователе. * Если пользователь не найден, возвращается пользователь с отрицательным идентификатором.",
				"input" : "Логин пользователя",
				"side" : "Отсутствуют."
			
		}
		,
		{
				"name" : "updateUser",
				"code" : "public void updateUser(User u)",
				"description" : "Обновить информацию о пользователе",
				"output" : "Отсутствуют",
				"input" : "Экземпляр класса User, содержащий информацию о пользователе.",
				"side" : "Модифицируется файл /App_Data/UserData.txt."
			
		}
		,
		{
				"name" : "getUserLastActivity",
				"code" : "public DateTime getUserLastActivity(string userlogin)",
				"description" : "Получить дату последней активности пользователя по его логину.",
				"output" : "Дата последней активности пользователя",
				"input" : "Логин пользователя",
				"side" : "Отсутствуют."
			
		},
		{
				"name" : "setUserLastActivity",
				"code" : "public void setUserLastActivity(string userLogin, DateTime activityTime)",
				"description" : "Установить дату последней активности пользователя по его логину",
				"output" : "Отсутствуют",
				"input" : "Логин пользователя, дата последней активности",
				"side" : "Модифицируется файл /App_Data/UserData.txt."
			
		}
		,
		{
				"name" : "getUnactiveUsersWithTask",
				"code" : "public void setUserLastActivity(int id, DateTime activityTime)",
				"description" : "Получить неактивных пользователей, у которых есть задача",
				"output" : "Массив, состоящий из объектов класса User. Содержит неактивных пользователей, у которых есть задача.",
				"input" : "Отсутствуют.",
				"side" : "Отсутствуют."
			
		}
		,
		{
				"name" : "createUser",
				"code" : "public void createUser(string login)",
				"description" : "Создать пользователя",
				"output" : "Отсутствуют",
				"input" : "Логин пользователя.",
				"side" : "Модифицируется файл /App_Data/UserData.txt"
			
		}
		,
		{
				"name" : "getFreeTaskId",
				"code" : "public int getFreeTaskId()",
				"description" : "Создает id для новой задачи",
				"output" : "Целое число(id для новой задачи)",
				"input" : "Отсутствуют.",
				"side" : " Модифицируется файл /App_Data/counter.txt"
			
		}
		,
		{
				"name" : "saveTask",
				"code" : "public void saveTask(Task input)",
				"description" : "Сохранить задачу в базе.",
				"output" : "Отсутствуют",
				"input" : "Экземпляр класса Task.",
				"side" : "Создается файл /App_Data/task/i.bin, где i - id задачи"
			
		}	
		,
		{	
				"name" : "loadTask",
				"code" : "public Task loadTask(int taskId)",
				"description" : "Загрузить задачу по идентификатору",
				"output" : "экземпляр класса Task",
				"input" : "Идентификатор задачи - целое число).",
				"side" : "Отсутствуют"
			
		}	
		,
		{
				"name" : "setUserTask",
				"code" : "public void setUserTask(int userID, int TaskID)",
				"description" : "Прикрепить пользователю с идентификатором id задачу с идентификатором TaskId",
				"output" : "Отсутствуют",
				"input" : "Идентификатор пользователя, идентификатор задачи",
				"side" : "Модифицируется файл /App_Data/user_task.txt"
			
		}		
		,
		{
				"name" : "getUserTasks",
				"code" : "public Task[] getUserTasks(int userID)",
				"description" : "Получить все задачи пользователя с идентификатором id",
				"output" : "Массив, состоящий из объектов класса Task",
				"input" : "Идентификатор пользователя",
				"side" : "Отсутствуют"
			
		}			
	],
	"Scheduler" : [
		{
			"name" : "Scheduler",
			"code" : "public Scheduler(string base_path)",
			"description" : "Конструктор",
			"output" : "Новый объект класса.",
			"input" : "Строка указывающая корневую папку для корректной внутренней адрессации.",
			"side" : "Отсутствуют."
			
		},
		{
			"name" : "createTask",
			"code" : "public bool createTask(int userId, string filePath, string func)",
			"description" : "Метод создает требуемую пользователю задачу и необходимые подзадачи. Все подзадачи распределяются между активными пользователями.",
			"output" : "Новый объект класса",
			"input" : "1) целое число хранящее идентификатор пользователя поставившего задачу (неотрицательное число);<br>2) строка хранящая путь к файлу с введенными данными;<br>3) строка с именем метода для решения задачи.",
			"side" : "Cоздание файлов данных задачи (частично незаполненого) и подзадач (полных) в папке /Content/data."
		},
		{
			"name" : "resetTask",
			"code" : "public bool resetTask(int userId)",
			"description" : "Метод переназначающий задачу неактивного пользователя",
			"output" : "Булева переменная, сигнализирующая о том, что задача может быть решена в текущий момент.",
			"input" : "Идентификатор неактивного пользователя (неотрицательное число).",
			"side" : "Отсутствуют."
		},
		{
			"name" : "setTask",
			"code" : "public bool setTask(Task t)",
			"description" : "Метод ставящий на выполнение задачу верхнего уровня.",
			"output" : "Булева переменная сигнализирующая о том, что задача может быть решена в текущий момент.",
			"input" : "Экземпляр задачи для решения.",
			"side" : "Отсутствуют."
		}
	],
	"Task" : [
		{
			"name" : "Task",
			"code" : "public Task(int owner_id, int task_id, int parent_task_id, string data_file_path, string function_name, string base_path)",
			"description" : "Конструктор",
			"output" : "Новый объект класса",
			"input" : "1) целое число хранящее идентификатор пользователя, которому нужно сообщить о результате (неотрицательное число);<br>2) целое число хранящее идентификатор задачи (неотрицательное число);<br>3) целое число хранящее идентификатор родительской задачи (неотрицательное число);<br>4) строка указывающая на файл с данными;<br>5) строка хранящая имя функции для решения;<br>6) строка указывающая корневую папку для корректной внутренней адресации.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "setChilds",
			"code" : "public void setChilds(int number_of_childs, int number_of_solved_childs = 0)",
			"description" : "Обновить информацию о количестве вложенных задач",
			"output" : "нет",
			"input" : "1) целое число хранящее количествов вложенных задач (неотрицательное число);<br>2) целое число хранящее количество уже решенных вложенных задач (по умолчанию 0, не должно превосходить числа вложенных задач).",
			"side" : "Отсутствуют."
		},
		{
			"name" : "updateTask",
			"code" : "public bool updateTask(string result)",
			"description" : "Метод сохраняющий решение вложенной задачи и обновляющий данные текущей задачи.",
			"output" : "Булева переменная сигнализирующая пора ли поставить задачу на выполнение",
			"input" : "Строка с результатом работы очеродной вложенной задачи.",
			"side" : "Чтение и запись в файл данных задачи;<br> Может быть создан файл задачи %taskID%.js в папке /Content/data/."
		},
		{
			"name" : "setAnswer",
			"code" : "public void setAnswer(string result)",
			"description" : "Метод сохраняющий решение задачи.",
			"output" : "Отсутствуют.",
			"input" : "Строка с результатом работы задачи.",
			"side" : "Запись в файл результата"
		},
		{
			"name" : "getOwnerId",
			"code" : "public int getOwnerId()",
			"description" : "Получение идентификатора пользователя поставившего задачу",
			"output" : "Целое число хранящее идентификатор (неотрицательное число).",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "getTaskId",
			"code" : "public int getTaskId()",
			"description" : "Получение идентификатора задачи",
			"output" : "Целое число хранящее идентификатор (неотрицательное число).",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "getParentTaskId",
			"code" : "public int getParentTaskId()",
			"description" : "Получение идентификатора родительской задачи.",
			"output" : "Целое число хранящее идентификатор (неотрицательное число).",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "getDataFilePath",
			"code" : "public string getDataFilePath()",
			"description" : "Получение пути файла данных этой задачи.",
			"output" : "Строка, содержащяя путь к файлу данных.",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "getResultFilePath",
			"code" : "public string getResultFilePath()",
			"description" : "Получение пути файла результатов этой задачи",
			"output" : "Строка, содержащяя путь к файлу результатов.",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "getFunctionName",
			"code" : "public string getFunctionName()",
			"description" : "Получение имени функции",
			"output" : "Строка, содержащяя путь к файлу результатов",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "hasChilds",
			"code" : "public bool hasChilds()",
			"description" : "Получение сведений о наличии вложенных задач",
			"output" : "Булева переменная, сигнализирующая о существовании вложенных задач.",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "getNumberOfChilds",
			"code" : "public int getNumberOfChilds()",
			"description" : "Получение количества вложенных задач",
			"output" : "Целое число, хранящее количество вложенных задач (неотрицательное).",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "getNumberOfSolvedChilds",
			"code" : "public int getNumberOfSolvedChilds()",
			"description" : "Получение количества вложенных решенных задач",
			"output" : "Целое число, хранящее количество вложенных решенных задач (неотрицательное).",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "isSolved",
			"code" : "public bool isSolved()",
			"description" : "Получение сведений о решенности задачи",
			"output" : "Булева переменная, сигнализирующая о решении задачи.",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		}		
	],
	"TaskIO" : [
		{
			"name" : "fillTaskFile",
			"code" : "public static void fillTaskFile(string filePath, int numberOfInput, string[] parameters)",
			"description" : "Запись частично незаполненого файла данных для родительской задачи",
			"output" : "Нет",
			"input" : " 1) строка с именем файла, куда следует производить запись;<br>2) целое число обозначающее количество дочерних задач;<br>3) массив строк содержащих параметры решения.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "fillDataFile",
			"code" : "public static void fillDataFile(string filePath, double[] data, string[] parameters)",
			"description" : "Формирование полного файла данных для решения.",
			"output" : "нет",
			"input" : "1) строка с именем файла, куда следует производить запись;<br>2) массив чисел с плавающей точкой содержащих численные данные;<br>3) массив строк содержащих параметры решения.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "parseInput",
			"code" : "public static void parseInput(string filePath, out int numberOfInputs, out double[] input, out string[] parameters)",
			"description" : "Парсинг полученного файла пользователя в машинное представление.",
			"output" : "Выходные параметры: <br> 1) целое число содержащее количество считанных данных; <br> 2) массив чисел с плавающей точкой содержащих численные данные; 3) массив строк содержащих параметры решения.",
			"input" : "1) целое число содержащее количество считанных данных;<br>2) массив чисел с плавающей точкой содержащих численные данные;<br>3) массив строк содержащих параметры решения.",
			"side" : "Отсутствуют."
		}
	],
	"User" : [
		{
			"name" : "User",
			"code" : "public User(int i, string log, bool hastask, Task curTask, DateTime lastActivTime)",
			"description" : "Конструктор",
			"output" : "Инициализированный экземпляр класса",
			"input" : "Идентификатор пользователя (целое число), логин(строка),* наличие задачи, задача, время последней активности(Дата)",
			"side" : "Отсутствуют."
		},
		{
			"name" : "setTask",
			"code" : "public void setTask(Task task)",
			"description" : "Поставить пользователю задачу.",
			"output" : "Отсутствуют",
			"input" : "Экземпляр задачи",
			"side" : "Отсутствуют."
		},
		{
			"name" : "resetTask",
			"code" : "public void resetTask()",
			"description" : "Сбросить задачу у пользователя.",
			"output" : "Отсутствуют",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "getId",
			"code" : "public int getId()",
			"description" : "Получить Id пользователя",
			"output" : "Идентификатор пользователя",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "hasCurrentTask",
			"code" : "public bool hasCurrentTask()",
			"description" : "Узнать имеет ли пользователь задачу",
			"output" : "Булева переменная - наличие задачи у пользователя",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "getTask",
			"code" : "public Task getTask()",
			"description" : "Получить задачу",
			"output" : "Задача.",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		},
		{
			"name" : "getLogin",
			"code" : "public string getLogin()",
			"description" : "Получить логин",
			"output" : "Логин.",
			"input" : "Отсутствуют.",
			"side" : "Отсутствуют."
		}		
	],
	
	"HomeController" : [
		{
			"name" : "About",
			"code" : "public ActionResult About()",
			"description" : "Метод вывода стандартной страницы информации о приложении",
			"input": "Отсутствуют",
			"output" : "<code>ActionResult</code>, с помощью которого пользователю предоставляется страница <code>About</code>",
			"side": "Отсутствуют"
		},
		
		{
			"name" : "Calculation",
			"code" : "public ActionResult Calculation(string task=\"-1\", string func=\"-1\")",
			"description" : "Метод реализует сборку страницы для произведения вычислений на стороне клиента. Идентификатор пользователя берется из значения сессии.",
			"input": "1) Строка с идентификатором задачи.<br>В строке должно находиться целое неотрицательное число или <code>-1</code><br>По умолчанию стоит <code>-1</code>, что обозначает, что нужный идентификатор не был установлен. Все прочие значения являются ошибкой.<br><br>2) Строка с именем функции.<br>Имя функции может быть произвольной строкой содержащей печатные символы.<br>По умолчанию стоит <code>-1</code>, что обозначает, что нужное имя не было установлено. Все прочие значения являются ошибкой.",
			"output" : "<code>ActionResult</code>, с помощью которого пользователь перенаправляется на страницу <code>Master</code>.<br>Если в ходе работы произошли ошибки, выводится сообщение об этом.",
			"side": "В ходе выполнения метода:<br>1) может модифицироваться файл <code>/App_Data/log.txt</code>;<br>2) устанавливается время последней активности пользователя."
		},
		{
			"name" : "checkFormatFile",
			"code" : "public string checkFormatFile(string nameFile)",
			"description" : "Метод проверки данных в файле на корректность.<br>Метод считывает строки из файла, название которого передано параметром. Файл должен иметь следующий формат:<br>1) в первой строке файла записано целочисленное число <code>(N)</code>, обозначающее количество численных данных, которые будут участвовать в решении задачи;<br>2) со второй строки и до <code>N+1</code> включительно строки находятся численные данные;<br>3) с <code>N+2</code> строки начинаются параметры.<br><br>Пример структуры файла:<br><code>Начало файла<br>5<br>123<br>123.567<br>123.567е+123<br>123е-456<br>567<br>alpha 0.2<br>Конец файла</code>",
			"input": "Метод принимает строку с названием файла.",
			"output" : "Метод возвращает строку, если строка пуста, то ошибок на корректность данных не обнаружено.<br>Во всех остальных случаях либо имеется ошибка в корректности данных, либо ошибка выполнения метода, в последнем случае строка будет содержать сообщение исключения.",
			"side": "В ходе работы может модифицироваться файл <code>/App_Data/log.txt</code>"
		},
		{
			"name" : "checkUser",
			"code" : "public bool checkUser(int id)",
			"description" : "Метод, в котором проверяется, решает ли пользователь с данным идентификатором задачу, поставленную текущим пользователем.<br>Идентификатор текущего пользователя берется из значения сессии.",
			"input": "Идентификатор проверяемого пользователя: целое неотрицательное число или <code>-1</code>.<br>По умолчанию стоит <code>-1</code>, что обозначает, что нужный идентификатор не был установлен. Все прочие значения являются ошибкой.",
			"output" : "<code>True</code> в случае если пользователь с данным идентификатором решает задачу и <code>False</code> в противном случае",
			"side": "Отсутствуют"
		},
		{
			"name" : "Contact",
			"code" : "public ActionResult Contact()",
			"description" : "Метод вывода стандартной страницы обратной связи",
			"input": "Отсутствуют",
			"output" : "<code>ActionResult</code>, с помощью которого пользователю предоставляется страница <code>Contact</code>",
			"side": "Отсутствуют"
		},
		{
			"name" : "Create",
			"code" : "public ActionResult Create(RegMe regMe)",
			"description" : "Метод для создания нового пользователя.",
			"input": "1. Экземпляр класса <code>RegMe</code>, содержащий информацию о новом пользователе:<br>Логин - строка или <code>null</code>, если ничего не введено в поле \"логин\"<br>Пароль - строка или <code>null</code>, если ничего не введено в поле \"пароль\"<br>Повтор пароля - строка или <code>null</code>, если ничего не введено в поле \"повторите пароль\"",
			"output" : "Если данные введены корректно, то <code>ActionResult</code>, с помощью которого пользователь перенаправляется на страницу <code>Index</code>,иначе на страницу <code>Register</code>.<br>Если в ходе работы произошли ошибки, выводится сообщение об этом.",
			"side": "Отсутствуют"
		},
		
		{
			"name" : "Index",
			"code" : "public ActionResult Index()",
			"description" : "Метод, который возвращает стартовую страницу приложения.",
			"input": "Отсутствуют",
			"output" : "<code>ActionResult</code>, с помощью которого пользователь перенаправляется на страницу <code>Index</code>",
			"side": "Отсутствуют"
		},
		
		{
			"name" : "getTask",
			"code" : "public string getTask(string login)",
			"description" : "Метод возвращает идентификатор задачи поставленой пользователю с ником login.",
			"output" : "строка с идентификатором задачи. Если ошибка, то строка равна null.",
			"input" : "строка с логином пользователя.",
			"side" : "Отсутствуют."
		},
		
		{
			"name" : "getFunc",
			"code" : "public string getFunc(string login)",
			"description" : "Метод возвращает имя функции поставленой задачи пользователю с ником login.",
			"output" : "строка с именем функции. Если ошибка, то строка равна null.",
			"input" : "строка с логином пользователя.",
			"side" : "Отсутствуют."
		},
		
		{
			"name" : "getUserIdWithTask",
			"code" : "public string getUserIdWithTask(string login)",
			"description" : " Метод возвращает идентификатор пользователя с ником login, если ему была поставлена задача.",
			"output" : "строка с именем функции. Если ошибка, то строка равна null.",
			"input" : "строка с логином пользователя.",
			"side" : "Отсутствуют."
		},
		
		{
			"name" : "Login",
			"code" : "public ActionResult Login(string username, string password)",
			"description" : "Метод для авторизации пользователя.",
			"input": "1. Логин пользователя. Если ничего не было введено в поле \"логин\", то <code>null</code>.<br>2. Пароль пользователя. Если ничего не было введено в поле \"пароль\", то <code>null</code>.",
			"output" : "Если авторизация успешна, то <code>ActionResult</code> с помощью которого пользователь перенаправляется на страницу <code>Master</code>,иначе на страницу <code>Index</code>. Куки, в которых хранится информация о вошедшем пользователе.<br>Если в ходе работы произошли ошибки, выводится сообщение об этом.",
			"side": "1. Модифицируется файл <code>/App_Data/UserData.txt</code><br>2. Модифицируется файл <code>/App_Data/OnlineUsers.txt</code><br>3. Модифицируется файл <code>/App_Data/log.txt</code>"
		},
		{
			"name" : "Logout",
			"code" : "public ActionResult Logout(string loginUser)",
			"description" : "Метод для выхода из приложения.",
			"input": "Строка логин - строка или <code>null</code>, если в куках ничего нет",
			"output" : "<code>ActionResult</code>, с помощью которого пользователь перенаправляется на страницу <code>Index</code>.<br>Куки, содержащие информацию о пользователе очищаются.<br>Если в ходе работы произошли ошибки, выводится сообщение об этом.",
			"side": "Отсутствуют"
		},
		{
			"name" : "Master",
			"code" : "public ActionResult Master()",
			"description" : "Метод вывода главной страницы приложения.<br>Здесь доступен выбор форм отправки задач, отправки функций, просмотра статуса текущих вычислений и вывод результатов решений.",
			"input": "Отсутствуют",
			"output" : "<code>ActionResult</code>, с помощью которого пользователю предоставляется страница <code>Master</code>",
			"side": "Отсутствуют"
		},
		{
			"name" : "Register",
			"code" : "public ActionResult Register()",
			"description" : "Метод, который возвращает страницу регистрации.",
			"input": "Отсутствуют",
			"output" : "<code>ActionResult</code>, с помощью которого пользователь перенаправляется на страницу <code>Register</code>",
			"side": "Отсутствуют"
		},
		{
			"name" : "resetTask",
			"code" : "public ActionResult resetTask(int id=-1)",
			"description" : "Метод реализует сброс задачи с указанным идентификатором",
			"input": "Идентификатор задачи - целое число<br>По умолчанию стоит <code>-1</code>, что означает, что нужный идентификатор не был установлен. Все прочие значения являются ошибкой.",
			"output" : "Отсутствуют",
			"side": "В ходе выполнения метода может модифицироваться файл <code>/App_Data/log.txt</code>"
		},
		{
			"name" : "Results",
			"code" : "public ActionResult Results()",
			"description" : "Метод собирает информацию о результатах вычисления задач текущего пользователя.<br>Идентификатор текущего пользователя берется из значения сессии.",
			"input": "Отсутствуют",
			"output" : "<code>ActionResult</code>, с помощью которого пользователь перенаправляется на страницу <code>Results</code>.<br>Если в ходе работы произошли ошибки, выводится сообщение об этом.",
			"side": "В ходе выполнения метода может модифицироваться файл <code>/App_Data/log.txt</code>"
		},
		{
			"name" : "SendFunc",
			"code" : "public ActionResult SendFunc()",
			"description" : "Метод вывода страницы отправки функций.",
			"input": "Отсутствуют",
			"output" : "<code>ActionResult</code>, с помощью которого пользователю предоставляется страница <code>SendFunc</code>",
			"side": "Отсутствуют"
		},
		{
			"name" : "SendTask",
			"code" : "public ActionResult SendTask()",
			"description" : "Метод вывода формы отправки данных на сервер для решения задачи",
			"input": "Отсутствуют",
			"output" : "<code>ActionResult</code>, с помощью которого пользователю предоставляется страница <code>SendTask</code>",
			"side": "Отсутствуют"
		},
		{
			"name" : "Status",
			"code" : "public ActionResult Status()",
			"description" : "Метод собирает информацию о пользователях в сети, статусе выполнения задач.<br>Данные берутся из файлов <code>/App_Data/UserData.txt</code> и <code>/App_Data/OnlineUsers.txt</code>",
			"input": "Отсутствуют",
			"output" : "<code>ActionResult</code>, с помощью которого пользователь перенаправляется на страницу <code>Status</code>.<br>Если в ходе работы произошли ошибки, выводится сообщение об этом.",
			"side": "В ходе работы может модифицироваться файл <code>/App_Data/log.txt</code>"
		},
		{
			"name" : "TransferOut",
			"code" : "public ActionResult TransferOut(string task, string result)",
			"description" : "Метод, отвечающий за сбор результата с клиента. Если существует родительская задача, её состояние обновляется. Предполагается, что метод выполняется в фоновом для пользователя режиме. Идентификатор пользователя берется из значения сессии.",
			"input": "1) Строка с идентификатором задачи.<br>В строке должно находиться целое неотрицательное число или <code>-1</code>.<br>По умолчанию стоит <code>-1</code>, что обозначает, что нужный идентификатор не был установлен. Все прочие значения являются ошибкой.<br>2) Строка с ответом на задачу. Ограничения не накладываются.",
			"output" : "<code>ActionResult</code>, с помощью которого пользователю предоставляется страница <code>TransferOut</code>.",
			"side": "В ходе выполнения метода:<br>1) Ответ записывается в файл с № задачи.<br>2) Может модифицироваться файл <code>/App_Data/log.txt</code>"
		},
		{
			"name" : "UploadFunc",
			"code" : "public ActionResult UploadFunc()",
			"description" : "Метод производит загрузку файла с кодом новой функции.",
			"input": "Отсутствуют",
			"output" : "<code>ActionResult</code>, с помощью которого пользователю предоставляется страница <code>SendFunc</code>.",
			"side": "Создание файла с именем <code>{user%userid%}%filename%.js</code> в папке <code>/Content/func/</code>"
		},
		{
			"name" : "UploadTask",
			"code" : "public ActionResult UploadTask(string method)",
			"description" : "Метод загружает файл с данными для решения задачи обработки данных, далее запускает проверку на корректностьданных в файле и ставит задачу с выбранным методом и данными на выполнение. Файл загружается на сервер с новым именем, которое берется из значения сессии.Далее данные в файле проверяются на корректность: вызывается метод проверки данных, который принимает названиефайла и возвращает строку результата. Если возвращаемая строка результата пуста, то данные в файле корректныи на представление вернется сообщение, что файл загружен. Если строка результата не пуста, то на представлениедолжно вернутся содержимое строки результата, а файл с данными удаляется.",
			"input": "Метод принимает строку с названием метода решения задачи.",
			"output" : "<code>ActionResult</code>, с помощью которого пользователю предоставляется страница <code>TransferOut</code>.<br><code>ViewBag</code> вернет на представление сообщение об ошибках формата данных или сообщение, что файл загружен.",
			"side": "1) Файл данных может быть  не загружен из-за отсутствия связи клиента с сервером.<br>2) Размер файла данных ограничен. Может выдать ошибку.<br>3) В ходе работы может модифицироваться файл <code>/App_Data/log.txt</code>"
		},
		{
			"name" : "Verification_by_integer_and_double",
			"code" : "string Verification_by_integer_and_double(string str, int iterator_by_str)",
			"description" : "Метод проверки строки на целочисленное число или вещественное число.<br>Численные данные могут иметь следующий формат:<br>а) десятичное целое число в диапазоне <code>-2147483648 : 2147483647</code>;<br>б) десятичное вещественное число через точку в диапазоне от <code>5Е-324</code> до <code>1,7Е+308</code>;<br>в) десятичное число с записью через <code>\"е\"</code> или <code>\"Е\"</code>.<br><br>Примеры числовых данных:<br><code>1234</code><br><code>1234.1234</code><br><code>1234Е+123</code><br><code>1234.12345е-1234</code>",
			"input": "1) строка данных, которая должна содержать в себе целочисленное или вещественное число;<br>2) порядковый номер строки данных в файле.",
			"output" : "строка результата, если есть ошибка коррекции данных, то в строку результата помещается пояснение ошибкис указанием номера строки в файле и в круглых скобках указывается неверное данное,если ошибок нет, то возвращается пустая строка.",
			"side": "В ходе работы может модифицироваться файл <code>/App_Data/log.txt</code>"
		},
		{
			"name" : "Verification_by_parameter",
			"code" : "string Verification_by_parameter(string str, int iterator_by_str)",
			"description" : "Метод проверки строки на коррекцию формата параметра.<br>Параметр должен иметь следующий формат:<br>а) \"Начало строки: нет пробельных символов\"+переменная+\"только пробел только один\"+число+\"Конец строки: нет пробельных символов\".<br>Переменная должна состоять только из английских буквы и цифр от <code>0</code> до <code>9</code>.<br>Число должно быть только десятичным, как целое, так и вещественное.<br>Если число целое, то должно быть в диапазоне <code>-2147483648 : 2147483647</code>;<br>Если вещественное число, то должно быть в диапазоне от <code>5Е-324</code> до <code>1.7Е+308</code>;<br>б) других форматов быть не может.<br><br>Пример параметра:<br><code>abs 123</code><br><code>abs 123.123</code>",
			"input": "1) строка данных, которая должна содержать в себе параметр;<br>2) порядковый номер строки данных в файле.",
			"output" : "Строка результата, если есть ошибка коррекции данных, то в строку результата помещается пояснение ошибкис указанием номера строки в файле и в круглых скобках указывается неверное данное,если ошибок нет, то возвращается пустая строка.",
			"side": "В ходе работы может модифицироваться файл <code>/App_Data/log.txt</code>"
		}
	],
	
	"HomeView" : [
		{
			"name" : "About",
			"code" : "About.cshtml",
			"description" : "Представление отображает информацию о приложении.",
			"input": "1) <code>@ViewBag.Title</code>Заголовок представления.<br>2) <code>@ViewBag.Message</code> Данные о приложении.<br>",
			"output" : "Отсутствуют",
			"side": "Отсутствуют"
		},
		{
			"name" : "BackgroundCheck",
			"code" : "backgroundcheck.cshtml",
			"description" : "Представление отображает состояние поставленной задачи.",
			"input": "Отсутствуют",
			"output" : "Отсутствуют",
			"side": "Отсутствуют"
		},
		{
			"name" : "Calculation",
			"code" : "Calculation.cshtml",
			"description" : "Представление ничего не отображает. Необходимо для обработки соответствующей управляющей функции.",
			"input": "Отсутствуют",
			"output" : "Отсутствуют",
			"side": "Отсутствуют"
		},
		{
			"name" : "Contact",
			"code" : "Contact.cshtml",
			"description" : "Представление отображает информацию обратной связи.",
			"input": "1) <code>@ViewBag.Title</code> Отображает заголовок представления. <br>2) <code>@ViewBag.Message</code> Отображает информацию обратной связи.",
			"output" : "Отсутствуют",
			"side": "Отсутствуют"
		},
		{
			"name" : "Index",
			"code" : "Index.cshtml",
			"description" : "Представление входа пользователя под своим именем и паролем.",
			"input": " 1) <code>@Html.TextBox(\"username\")</code> Имя пользователя.<br>2) <code>@Html.Password(\"password\")</code> Пароль пользователя. <br>",
			"output" : "1) <code>@Html.TextBox(\"username\")</code> Имя пользователя.<br>2) <code>@Html.Password(\"password\")</code> Пароль пользователя. <br>3) <code>@Html.ActionLink(\"Зарегистрироваться\", \"Register\", \"Home\")</code> Компонент, который переводит на представление <code>Register.cshtml</code>",
			"side": "Отсутствуют"
		},
		{
			"name" : "Master",
			"code" : "Master.cshtml",
			"description" : "Представление отображает главную страницу приложения.",
			"input": "<code>@ViewBag.MessagerFromControl</code> Отображает текст ошибки, возвращаемая с других управляющих функций.",
			"output" : "<code>@ViewBag.Title</code> Задает текст загаловка.",
			"side": "Отсутствуют"
		},
		{
			"name" : "Register",
			"code" : "Register.cshtml",
			"description" : "Представление регистрации пользователя.",
			"input": "<code>model</code> Пустая модель регистрации поступает на представление.",
			"output" : "<code>model</code> Заполненая модель регистрации отправляется в управляющую функцию.",
			"side": "Отсутствуют"
		},
		{
			"name" : "Results",
			"code" : "Results.cshtml",
			"description" : "Представление отображает результат решенной задачи.",
			"input": "<code>ViewBag.Out</code> Содержит список данных результата решения задачи.",
			"output" : "Отсутствуют",
			"side": "Отсутствуют"
		},
		{
			"name" : "SendFunc",
			"code" : "SendFunc.cshtml",
			"description" : "Представление загрузки файла с задачей.",
			"input": "<code>ViewBag.Out</code> Содержит список данных результата решения задачи.",
			"output" : "В управляющую функцию отправляется файл, загруженный компонентом <code>Html.BeginForm(\"UploadFunc\", \"Home\", FormMethod.Post, new { enctype = \"multipart/form-data/\" })</code>",
			"side": "Отсутствуют"
		},
		{
			"name" : "SendTask",
			"code" : "SendTask.cshtml",
			"description" : "Представление загрузки файла и выбора метода решения задачи.",
			"input": "<code>@ViewBag.MessagerFromControl</code> Содержит текст результата загрузки",
			"output" : "1) В управляющую функцию отправляется файл, загруженный компонентом <code> Html.BeginForm(\"UploadTask\", \"Home\", FormMethod.Post, new { enctype = \"multipart/form-data\" })</code>. <br>2) В управляющую функцию отправляется значение  выпадающего списка компонента <code>@Html.DropDownList</code>. <br>",
			"side": "Отсутствуют"
		},
		{
			"name" : "Status",
			"code" : "Status.cshtml",
			"description" : "Представление отображает статус выполняемой задачи.",
			"input": "<code>ViewData[\"UserStat\"]</code> Содержит спосик статуса пользователей и задач на выполнение.",
			"output" : "Отсутствуют",
			"side": "Отсутствуют"
		},
		{
			"name" : "TransferOut",
			"code" : "TransferOut.cshtml",
			"description" : "Представление ничего не отображает. Необходимо для обработки соответствующей управляющей функции.",
			"input": "Отсутствуют",
			"output" : "Отсутствуют",
			"side": "Отсутствуют"
		}
	],
	
	"BackgroundHub" : [
		{
			"name" : "getTask",
			"code" : " public string getTask()",
			"description" : "Метод возвращающий идентификатор задачи поставленной данному пользователю.",
			"input": "Отсутствуют",
			"output" : "строка с идентификатором задачи. Если задача не поставлена, строка равна -1.",
			"side": "Отсутствуют"
		},
		
		{
			"name" : "getFunc",
			"code" : "public string getFunc()",
			"description" : "Метод возвращающий имя метода решения задачи поставленной данному пользователю.",
			"input": "Отсутствуют",
			"output" : "строка с именам функции. Если задача не поставлена, строка равна -1.",
			"side": "Отсутствуют"
		},
		
		{
			"name" : "OnConnected",
			"code" : "public override Task OnConnected()",
			"description" : "Метод ставящий задачу пользователя,если необходимо, при установке соединения. ",
			"input": "Отсутствуют",
			"output" : "Отсутствуют",
			"side": "Отсутствуют"
		},
		
		{
			"name" : "OnReconnected",
			"code" : "public override Task OnReconnected()",
			"description" : "Метод ставящий задачу пользователя,если необходимо, при востановлении соединения.",
			"input": "Отсутствуют",
			"output" : "Отсутствуют",
			"side": "Отсутствуют"
		}
	]
}
